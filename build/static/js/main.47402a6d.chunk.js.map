{"version":3,"sources":["components/filters/filtersSlice.ts","fakeApi/client.js","components/todos/todosSlice.ts","components/header/Header.tsx","components/filters/colors.ts","components/todos/TodoListItem.tsx","components/todos/TodoList.tsx","components/footer/Footer.tsx","App.tsx","fakeApi/server.js","reducer.ts","store.ts","index.tsx"],"names":["StatusFilters","All","Active","Completed","initialState","status","colors","Array","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","createSelector","state","todos","map","todo","id","selectFilteredTodos","filters","showAllCompletions","length","completedStatus","filter","statusMatches","completed","colorMatches","color","includes","selectFilteredTodoIds","filteredTodos","Header","useState","text","setText","dispatch","useDispatch","className","type","placeholder","autoFocus","value","onChange","e","target","onKeyDown","trimmedText","trim","key","initialTodo","payload","saveNewTodo","availableColors","capitalize","s","toUpperCase","slice","TodoListItem","useSelector","todoId","find","selectTodoById","colorOptions","c","checked","label","parentElement","classList","toggle","style","onClick","TodoList","renderedListItems","RemainingTodos","props","suffix","count","StatusFilter","renderedFilters","Object","keys","ColorFilters","renderedColors","name","backgroundColor","Footer","todosRemaining","changeType","colorFilterChanged","App","document","viewBox","stroke","d","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomFromArray","array","min","max","Math","ceil","floor","todoTemplates","base","values","Server","routes","this","namespace","resource","server","schema","req","normalizedRequestAttrs","create","models","Model","list","hasMany","factories","Factory","i","Number","template","replace","generateTodoText","serializers","serialize","object","request","numerifyId","prototype","apply","arguments","forEach","seeds","createList","rootReducer","combineReducers","action","concat","existingColor","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.47402a6d.chunk.js","sourcesContent":["interface IStatusFilters {\r\n    [key: string]: string\r\n}\r\n\r\nexport const StatusFilters: IStatusFilters = {\r\n    All: 'all',\r\n    Active: 'active',\r\n    Completed: 'completed',\r\n}\r\n\r\nconst initialState = {\r\n    status: StatusFilters.All,\r\n    colors: Array<string>()\r\n}\r\n\r\ntype actionType = {\r\n    type: string,\r\n    payload?: any\r\n}\r\n\r\nexport default function filtersReducer(state = initialState, action: actionType) {\r\n    switch (action.type) {\r\n        case 'filters/statusFilterChanged': {\r\n            return {\r\n                ...state,\r\n                status: action.payload\r\n            }\r\n        }\r\n        case 'filters/colorFilterChanged': {\r\n            let {color, changeType} = action.payload;\r\n            const {colors} = state;\r\n\r\n            switch (changeType) {\r\n                case 'added': {\r\n                    if (colors.includes(color)) {\r\n                        return state;\r\n                    }\r\n\r\n                    return {\r\n                        ...state,\r\n                        colors: state.colors.concat(color)\r\n                    }\r\n                }\r\n                case 'removed': {\r\n                    return {\r\n                        ...state,\r\n                        colors: state.colors.filter(\r\n                            (existingColor) => existingColor !== color\r\n                        )\r\n                    }\r\n                }\r\n                default: return state;\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\n//Action creators\r\nexport const colorFilterChanged = (color: string, changeType: string) => {\r\n    return {\r\n        type: 'filters/colorFilterChanged',\r\n        payload: {color, changeType}\r\n    }\r\n}","export async function client(endpoint, { body, ...customConfig } = {}) {\r\n    const headers = { 'Content-Type': 'application/json' }\r\n\r\n    const config = {\r\n        method: body ? 'POST' : 'GET',\r\n        ...customConfig,\r\n        headers: {\r\n            ...headers,\r\n            ...customConfig.headers,\r\n        },\r\n    }\r\n\r\n    if (body) {\r\n        config.body = JSON.stringify(body)\r\n    }\r\n\r\n    let data\r\n    try {\r\n        const response = await window.fetch(endpoint, config)\r\n        data = await response.json()\r\n        if (response.ok) {\r\n            return data\r\n        }\r\n        throw new Error(response.statusText)\r\n    } catch (err) {\r\n        return Promise.reject(err.message ? err.message : data)\r\n    }\r\n}\r\n\r\nclient.get = function (endpoint, customConfig = {}) {\r\n    return client(endpoint, { ...customConfig, method: 'GET' })\r\n}\r\n\r\nclient.post = function (endpoint, body, customConfig = {}) {\r\n    return client(endpoint, { ...customConfig, body })\r\n}","import {createSelector} from 'reselect';\r\n\r\nimport {stateType, todoItemType} from '../../store';\r\nimport {StatusFilters} from \"../filters/filtersSlice\";\r\nimport {client} from \"../../fakeApi/client\";\r\n\r\ntype actionType = {\r\n    type: string,\r\n    payload?: any\r\n}\r\n\r\nconst initialState = Array<todoItemType>();\r\n\r\nexport default function todosReducer(state = initialState, action: actionType) {\r\n    switch (action.type) {\r\n        case 'todos/todoAdded': {\r\n            return [...state, action.payload]\r\n        }\r\n        case 'todos/todoToggled': {\r\n            return state.map(todo => {\r\n                if (todo.id !== action.payload) {\r\n                    return todo;\r\n                }\r\n\r\n                return {\r\n                    ...todo,\r\n                    completed: !todo.completed\r\n                }\r\n            })\r\n        }\r\n        case 'todos/todoColorChanged': {\r\n            const {todoId, color} = action.payload;\r\n            return state.map((todo: todoItemType) => {\r\n                if (todo.id !== todoId) {\r\n                    return todo;\r\n                }\r\n\r\n                return {\r\n                    ...todo,\r\n                    color\r\n                }\r\n            })\r\n        }\r\n        case 'todos/todoDeleted': {\r\n            return state.filter((todo: todoItemType) => todo.id !== action.payload);\r\n        }\r\n        case 'todos/allCompleted': {\r\n            return state.map((todo: todoItemType) => {\r\n                return {\r\n                    ...todo,\r\n                    completed: true\r\n                }\r\n            })\r\n        }\r\n        case 'todos/clearCompleted': {\r\n            return state.filter((todo: todoItemType) => !todo.completed);\r\n        }\r\n        case 'todos/todosLoaded': {\r\n            return action.payload;\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\n//Action creator\r\nexport const todosLoaded = (todos: todoItemType[]) => {\r\n    return {\r\n        type: 'todos/todosLoaded',\r\n        payload: todos\r\n    }\r\n}\r\n\r\nexport const todoAdded = (todo: todoItemType) => {\r\n    return {\r\n        type: 'todos/todoAdded',\r\n        payload: todo\r\n    }\r\n}\r\n\r\n//Thunk functions\r\nexport const fetchTodos = () => async (dispatch: (action: actionType) => void) => {\r\n    const response = await client.get('/fakeApi/todos')\r\n    dispatch(todosLoaded(response.todos))\r\n}\r\n\r\nexport function saveNewTodo(text: string) {\r\n    return async function saveNewTodoThunk(dispatch: (action: actionType) => void) {\r\n        const initialTodo = {text};\r\n        const response = await client.post('/fakeApi/todos', { todo: initialTodo});\r\n        dispatch(todoAdded(response.todo));\r\n    }\r\n}\r\n\r\n//Memoizing Selectors\r\nexport const selectTodoIds = createSelector(\r\n    (state: stateType) => state.todos,\r\n    (todos: todoItemType[]) => todos.map(todo => todo.id)\r\n);\r\n\r\nexport const selectFilteredTodos  = createSelector(\r\n    (state: stateType) => state.todos,\r\n    (state: stateType) => state.filters,\r\n    (todos: todoItemType[], filters: {colors: string[], status: string}) => {\r\n        const {colors, status} = filters;\r\n        const showAllCompletions: boolean = status === StatusFilters.All;\r\n        if (showAllCompletions && colors.length === 0) {\r\n            return todos;\r\n        }\r\n\r\n        const completedStatus = status === StatusFilters.Completed;\r\n        return todos.filter((todo: todoItemType) => {\r\n            const statusMatches = showAllCompletions || todo.completed === completedStatus;\r\n            const colorMatches = colors.length === 0 || (todo.color && colors.includes(todo.color));\r\n            return statusMatches && colorMatches;\r\n        });\r\n    }\r\n);\r\n\r\nexport const selectFilteredTodoIds = createSelector(\r\n    selectFilteredTodos,\r\n    (filteredTodos: todoItemType[]) => filteredTodos.map((todo: todoItemType) => todo.id)\r\n);","import React, {useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {saveNewTodo} from '../todos/todosSlice';\r\n\r\nimport './header.scss'\r\n\r\nconst Header = () => {\r\n    const [text, setText] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.target.value);\r\n    };\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent) => {\r\n        const element = e.target as HTMLInputElement;\r\n        const trimmedText: string = element.value.trim();\r\n\r\n        if (e.key === 'Enter' && trimmedText) {\r\n            dispatch(saveNewTodo(trimmedText));\r\n            setText('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <header className='header'>\r\n            <input\r\n                type='text'\r\n                placeholder='What needs to be done?'\r\n                autoFocus={true}\r\n                className='header__new-todo'\r\n                value={text}\r\n                onChange={handleChange}\r\n                onKeyDown={handleKeyDown}\r\n            />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","export const availableColors: string[] = ['green', 'blue', 'orange', 'purple', 'red'];\r\n\r\nexport const capitalize = (s: string) => s[0].toUpperCase() + s.slice(1);","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport {availableColors, capitalize} from '../filters/colors';\r\nimport {stateType, todoItemType} from '../../store';\r\n\r\nconst selectTodoById = (state: stateType, todoId: number) => {\r\n    return state.todos.find(todo => todo.id === todoId);\r\n}\r\n\r\ninterface ITodoListItem {\r\n    id: number\r\n}\r\n\r\nconst TodoListItem: React.FC<ITodoListItem> = ({id}) => {\r\n    // @ts-ignore\r\n    const todo: todoItemType = useSelector((state: stateType) => selectTodoById(state, id));\r\n    const {text, completed, color} = todo;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCompleteChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch({type: 'todos/todoToggled', payload: todo.id});\r\n        let label = e.target.parentElement;\r\n        if (label !== null) {\r\n            label.classList.toggle('todo__content_checked');\r\n        }\r\n    }\r\n\r\n    const handleColorChanged = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const color = e.target.value;\r\n        dispatch({type: 'todos/todoColorChanged', payload: {todoId: todo.id, color: color}});\r\n    }\r\n\r\n    const handleDeleteBtn = () => {\r\n        dispatch({type: 'todos/todoDeleted', payload: todo.id});\r\n    }\r\n\r\n    const colorOptions = availableColors.map((c: string) => (\r\n        <option key={c} value={c}>\r\n            {capitalize(c)}\r\n        </option>\r\n    ))\r\n\r\n    return (\r\n        <li>\r\n            <div className='todo'>\r\n                <div className='todo__part'>\r\n                    <label className={completed ? 'todo__content todo__content_checked' : 'todo__content'}>\r\n                        <input\r\n                            className='todo__checkbox'\r\n                            type='checkbox'\r\n                            checked={completed}\r\n                            onChange={handleCompleteChanged}\r\n                        />\r\n                        <span>{text}</span>\r\n                    </label>\r\n                </div>\r\n                <div className='todo__part'>\r\n                    <select\r\n                        className='todo__color color-picker'\r\n                        value={color}\r\n                        style={{ color }}\r\n                        onChange={handleColorChanged}\r\n                    >\r\n                        <option value=''> </option>\r\n                        {colorOptions}\r\n                    </select>\r\n                    <span className='todo__deleteBtn' onClick={handleDeleteBtn}> </span>\r\n                </div>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default TodoListItem","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport TodoListItem from './TodoListItem';\r\nimport {selectFilteredTodoIds} from \"./todosSlice\";\r\n\r\nimport './todo-list.scss';\r\n\r\nconst TodoList: React.FC = () => {\r\n    const todoIds: number[] = useSelector(selectFilteredTodoIds);\r\n\r\n    const renderedListItems = todoIds.map(todoId => {\r\n        return <TodoListItem key={todoId} id={todoId}/>\r\n    })\r\n\r\n    return <ul className='todo-list'>{renderedListItems}</ul>\r\n}\r\n\r\nexport default TodoList","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport {StatusFilters, colorFilterChanged} from '../filters/filtersSlice';\r\nimport {availableColors, capitalize} from '../filters/colors';\r\nimport {stateType, todoItemType} from '../../store';\r\n\r\nimport './footer.scss';\r\n\r\nconst RemainingTodos: React.FC<{count: number}> = (props) => {\r\n    const suffix = props.count === 1 ? '' : 's';\r\n\r\n    return (\r\n        <div className='footer__col'>\r\n            <h5 className='footer__title'>Todos</h5>\r\n            <strong className='footer__todos-num'>{props.count}</strong> item{suffix} left\r\n        </div>\r\n    )\r\n}\r\n\r\ntype statusFilterProps = {\r\n    status: string,\r\n    onChange: (s: string) => void\r\n}\r\n\r\nconst StatusFilter: React.FC<statusFilterProps> = ({status, onChange}) => {\r\n\r\n    const renderedFilters = Object.keys(StatusFilters).map((key) => {\r\n        const value: string = StatusFilters[key];\r\n        const handleClick = () => onChange(value);\r\n        const className: string = value === status ? 'footer__btn footer__btn_selected' : 'footer__btn';\r\n\r\n        return (\r\n            <li key={value}>\r\n                <button className={className} onClick={handleClick}>\r\n                    {key}\r\n                </button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className='footer__col'>\r\n            <h5 className='footer__title'>Filter by Status</h5>\r\n            <ul className='footer__filters'>{renderedFilters}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype colorFilterProps = {\r\n    colors: string[],\r\n    onChange: (color: string, changeType: string) => void\r\n}\r\n\r\nconst ColorFilters: React.FC<colorFilterProps> = ({colors, onChange}) => {\r\n    const renderedColors = availableColors.map((color) => {\r\n        const checked: boolean = colors.includes(color);\r\n        const handleChange = () => {\r\n            const changeType: string = checked ? 'removed' : 'added';\r\n            onChange(color, changeType);\r\n        }\r\n\r\n        return (\r\n            <label key={color} className={checked ? 'footer__color footer__color_checked' : 'footer__color'}>\r\n                <input\r\n                    type='checkbox'\r\n                    name={color}\r\n                    checked={checked}\r\n                    onChange={handleChange}\r\n                />\r\n                <span\r\n                    style={{\r\n                        backgroundColor: color,\r\n                    }}\r\n                > </span>\r\n                {capitalize(color)}\r\n            </label>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <div className='footer__col'>\r\n            <h5 className='footer__title'>Filter by Color</h5>\r\n            <form className='footer__colors'>{renderedColors}</form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Footer: React.FC = () => {\r\n    const todosRemaining: number = useSelector((state: stateType) => {\r\n        const uncompletedTodos: todoItemType[] = state.todos.filter(todo => !todo.completed);\r\n        return uncompletedTodos.length;\r\n    })\r\n\r\n    const {status, colors} = useSelector((state: stateType) => state.filters);\r\n    const dispatch = useDispatch();\r\n\r\n    const markAllCompleted = () => {\r\n        dispatch({type: 'todos/allCompleted'});\r\n    }\r\n\r\n    const clearCompleted = () => {\r\n        dispatch({type: 'todos/clearCompleted'});\r\n    }\r\n\r\n    const onStatusChange = (status: string) => {\r\n        dispatch({type: 'filters/statusFilterChanged', payload: status});\r\n    }\r\n\r\n    const onColorChange = (color: string, changeType: string) => {\r\n        dispatch(colorFilterChanged(color, changeType));\r\n    };\r\n\r\n    return (\r\n        <footer className='footer'>\r\n            <div className='footer__col'>\r\n                <h5 className='footer__title'>Actions</h5>\r\n                <button className='footer__btn' onClick={markAllCompleted}>Mark All Completed</button>\r\n                <button className='footer__btn' onClick={clearCompleted}>Clear Completed</button>\r\n            </div>\r\n\r\n            <RemainingTodos count={todosRemaining} />\r\n            <StatusFilter status={status} onChange={onStatusChange} />\r\n            <ColorFilters colors={colors} onChange={onColorChange} />\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\n\nimport Header from './components/header/Header';\nimport TodoList from './components/todos/TodoList';\nimport Footer from './components/footer/Footer';\n\nimport './app.scss'\n\nfunction App() {\n    const changeTheme = () => {\n        document.body.classList.toggle('light-theme');\n    }\n\n  return (\n      <div className='container'>\n          <div className='app'>\n              <div className='dark-light' onClick={changeTheme}>\n                  <svg viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path d=\"M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z\"/>\n                  </svg>\n              </div>\n              <section className='app__section'>\n                  <h2 className='app__header'>Todos</h2>\n                  <div className='app__body'>\n                      <Header/>\n                      <TodoList/>\n                      <Footer/>\n                  </div>\n              </section>\n          </div>\n      </div>\n  );\n}\n\nexport default App","import { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs'\r\n\r\nimport faker from 'faker'\r\nimport seedrandom from 'seedrandom'\r\n\r\nconst IdSerializer = RestSerializer.extend({\r\n    serializeIds: 'always',\r\n})\r\n\r\n// Set up a seeded random number generator, so that we get\r\n// a consistent set of users / entries each time the page loads.\r\n// This can be reset by deleting this localStorage value,\r\n// or turned off by setting `useSeededRNG` to false.\r\nlet useSeededRNG = false\r\n\r\nlet rng = seedrandom()\r\n\r\nif (useSeededRNG) {\r\n    let randomSeedString = localStorage.getItem('randomTimestampSeed')\r\n    let seedDate\r\n\r\n    if (randomSeedString) {\r\n        seedDate = new Date(randomSeedString)\r\n    } else {\r\n        seedDate = new Date()\r\n        randomSeedString = seedDate.toISOString()\r\n        localStorage.setItem('randomTimestampSeed', randomSeedString)\r\n    }\r\n\r\n    rng = seedrandom(randomSeedString)\r\n    faker.seed(seedDate.getTime())\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min)\r\n    max = Math.floor(max)\r\n    return Math.floor(rng() * (max - min + 1)) + min\r\n}\r\n\r\nconst randomFromArray = (array) => {\r\n    const index = getRandomInt(0, array.length - 1)\r\n    return array[index]\r\n}\r\n\r\nconst todoTemplates = [\r\n    { base: 'Buy $THING', values: ['milk', 'bread', 'cheese', 'toys'] },\r\n    { base: 'Clean $THING', values: ['house', 'yard', 'bedroom', 'car'] },\r\n    { base: 'Read $THING', values: ['newspaper', 'book', 'email'] },\r\n]\r\n\r\nconst generateTodoText = () => {\r\n    const template = randomFromArray(todoTemplates)\r\n    const value = randomFromArray(template.values)\r\n    const text = template.base.replace('$THING', value)\r\n    return text\r\n}\r\n\r\nnew Server({\r\n    routes() {\r\n        this.namespace = 'fakeApi'\r\n        //this.timing = 2000\r\n\r\n        this.resource('todos')\r\n        this.resource('lists')\r\n\r\n        const server = this\r\n\r\n        this.post('/todos', function (schema, req) {\r\n            const data = this.normalizedRequestAttrs()\r\n\r\n            if (data.text === 'error') {\r\n                throw new Error('Could not save the todo!')\r\n            }\r\n\r\n            const result = server.create('todo', data)\r\n            return result\r\n        })\r\n    },\r\n    models: {\r\n        todo: Model.extend({}),\r\n        list: Model.extend({\r\n            todos: hasMany(),\r\n        }),\r\n    },\r\n    factories: {\r\n        todo: Factory.extend({\r\n            id(i) {\r\n                return Number(i)\r\n            },\r\n            text() {\r\n                return generateTodoText()\r\n            },\r\n            completed() {\r\n                return false\r\n            },\r\n            color() {\r\n                return ''\r\n            },\r\n        }),\r\n    },\r\n    serializers: {\r\n        todo: IdSerializer.extend({\r\n            serialize(object, request) {\r\n                // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\r\n                const numerifyId = (todo) => {\r\n                    todo.id = Number(todo.id)\r\n                }\r\n                let json = IdSerializer.prototype.serialize.apply(this, arguments)\r\n\r\n                if (json.todo) {\r\n                    numerifyId(json.todo)\r\n                } else if (json.todos) {\r\n                    json.todos.forEach(numerifyId)\r\n                }\r\n\r\n                return json\r\n            },\r\n        }),\r\n        list: IdSerializer,\r\n    },\r\n    seeds(server) {\r\n        server.createList('todo', 5)\r\n    },\r\n})","import {combineReducers} from 'redux';\r\n\r\nimport todosReducer from './components/todos/todosSlice';\r\nimport filtersReducer from './components/filters/filtersSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n    todos: todosReducer,\r\n    filters: filtersReducer\r\n})\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducer';\r\n\r\nexport type todoItemType = {\r\n    id: number,\r\n    text: string,\r\n    completed: boolean,\r\n    color?: string\r\n}\r\n\r\nexport type stateType = {\r\n    todos: todoItemType[],\r\n    filters: {\r\n        status: string,\r\n        colors: string[]\r\n    }\r\n}\r\n\r\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware));\r\n\r\nconst store = createStore(rootReducer, composedEnhancer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport './style.scss'\nimport App from './App';\nimport './fakeApi/server';\nimport store from './store';\nimport {fetchTodos} from './components/todos/todosSlice';\n\n// @ts-ignore\nstore.dispatch(fetchTodos());\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}